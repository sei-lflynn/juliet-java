 # SonarCloud analysis for this Java repo
# -----------------------------------------------------------------------------
# What this does:
#   1) Builds the code with a Java-centric SonarCloud workflow that uses the Sonar Maven scanner
#   2) Runs the SonarCloud scanner
#   3) Waits for analysis to finish, pulls issues from SonarCloud's API,
#      converts to SARIF, uploads as an artifact
#   4) Publishes the SARIF to GitHub Code Scanning in a separate, least-privilege job
#
# Why it looks this way (key principles):
#   • Default‑deny permissions – read‑only by default; elevate only in the upload job
#   • Pinned actions – commit SHAs, not floating tags, for reproducibility and tamper‑resistance
#   • Hardened egress – audit (or block) network calls to limit exfiltration risk
#   • Concurrency – cancel superseded runs to save time and money
#   • Timeouts – fail fast instead of hanging for hours
#   • Scoped checkout credentials – don't persist the GitHub token into the repo
#   • Clear triggers – run only when relevant files change
#
# Prereqs in the repo:
#   • sonar-project.properties with:
#       sonar.projectKey=<your_sonarcloud_project_key>
#       sonar.organization=<your_sonarcloud_org_key>
#       sonar.sources=.
#
# Secret needed:
#   • SONAR_TOKEN (Actions → Secrets) – a SonarCloud user token with access to the project

# SonarCloud analysis for a Java/Maven repo (hardened + least privilege)
# ---------------------------------------------------------------------

name: SonarCloud (Java)

on:
  push:
    branches: [ "main" ]
    paths:
      - '**/*.java'
      - '**/pom.xml'
      - '.mvn/**'
      - 'mvnw'
      - 'mvnw.cmd'
      - 'sonar-project.properties'
      - '.github/workflows/sonarcloud-java.yml'
  pull_request:
    branches: [ "main" ]
    types: [opened, synchronize, reopened]
    paths:
      - '**/*.java'
      - '**/pom.xml'
      - '.mvn/**'
      - 'mvnw'
      - 'mvnw.cmd'
      - 'sonar-project.properties'
      - '.github/workflows/sonarcloud-java.yml'
  # workflow_dispatch:  # enable if you want manual runs

# Concurrency – cancel superseded runs on the same ref
concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

# Default-deny permissions at the workflow level (read-only)
permissions:
  contents: read

jobs:
  build-and-analyze:
    name: Build + SonarCloud analyze + SARIF artifact
    runs-on: ubuntu-24.04
    timeout-minutes: 25
    permissions:
      contents: read   # read-only; no write scopes here

    steps:
      # Harden egress – start in audit; switch to block + allowlist when stable
      - name: Harden runner (audit egress)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit
          # When stable, prefer:
          # egress-policy: block
          # allowed-endpoints: >
          #   sonarcloud.io
          #   api.sonarcloud.io
          #   binaries.sonarsource.com
          #   github.com
          #   api.github.com
          #   uploads.github.com
          #   objects.githubusercontent.com

      # Scoped checkout credentials – don't persist the GitHub token in the repo
      - name: Checkout (no persisted creds)
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          fetch-depth: 0
          persist-credentials: false

      # JDK 17 with Maven cache
      - name: Set up JDK 17
        uses: actions/setup-java@8df1039502a15bceb9433410b1a100fbe190c50f # v4
        with:
          distribution: temurin
          java-version: '17'
          cache: 'maven'

      # Optional: quick env sanity check
      - name: Show Java & Maven versions
        run: |
          set -eux
          java -version
          mvn -v

      # Build and test
      - name: Build with Maven
        run: mvn -B -DskipTests=false clean verify

      # SonarCloud analysis via Maven scanner
      - name: SonarCloud scan (Maven)
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B org.sonarsource.scanner.maven:sonar-maven-plugin:sonar
        # If you use a self-hosted SonarQube, also pass -Dsonar.host.url=...

      # Generate SARIF from SonarCloud issues (waits for CE task)
      - name: Generate SARIF from SonarCloud issues
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          set -euo pipefail
          python3 - <<'PY'
          import base64, json, os, time, urllib.parse, urllib.request, pathlib

          def read_project_key():
              with open("sonar-project.properties", "r", encoding="utf-8") as f:
                  for line in f:
                      line=line.strip()
                      if line.startswith("sonar.projectKey="):
                          return line.split("=",1)[1].strip()
              raise RuntimeError("sonar.projectKey not found in sonar-project.properties")

          def get_json(url, token):
              req = urllib.request.Request(url)
              auth = base64.b64encode((token + ":").encode()).decode()
              req.add_header("Authorization", "Basic " + auth)
              with urllib.request.urlopen(req, timeout=30) as r:
                  return json.load(r)

          base = "https://sonarcloud.io"
          token = os.environ["SONAR_TOKEN"]
          project_key = read_project_key()
          print(f"Project: {project_key}")

          # Wait for the most recent Compute Engine task to finish
          for _ in range(120):  # ~6 minutes max
              act = get_json(f"{base}/api/ce/activity?component={urllib.parse.quote(project_key)}&onlyCurrents=true&ps=1", token)
              tasks = act.get("tasks", [])
              if tasks:
                  tid = tasks[0]["id"]
                  ce = get_json(f"{base}/api/ce/task?id={tid}", token)
                  status = ce["task"]["status"]
                  print(f"CE status: {status}")
                  if status in ("SUCCESS", "FAILED", "CANCELED"):
                      break
              else:
                  print("No CE tasks yet")
              time.sleep(3)

          # Pull unresolved issues for the current branch/analysis
          p=1; page_size=500; issues=[]
          while True:
              data = get_json(f"{base}/api/issues/search?componentKeys={urllib.parse.quote(project_key)}&resolved=false&ps={page_size}&p={p}", token)
              batch = data.get("issues", [])
              if not batch:
                  break
              issues.extend(batch)
              total = data.get("total", 0)
              if p*page_size >= total:
                  break
              p += 1

          def level(sev):
              return {"BLOCKER":"error","CRITICAL":"error","MAJOR":"warning","MINOR":"note","INFO":"note"}.get(sev,"warning")

          runs = [{
              "tool": {
                  "driver": {
                      "name": "SonarCloud",
                      "informationUri": "https://sonarcloud.io",
                      "rules": []
                  }
              },
              "results": []
          }]

          rule_added = set()
          for it in issues:
              rid = str(it.get("rule","unknown"))
              if rid not in rule_added:
                  runs[0]["tool"]["driver"]["rules"].append({
                      "id": rid,
                      "shortDescription": {"text": (it.get("message","") or "")[:120]}
                  })
                  rule_added.add(rid)
              comp = it.get("component","")
              path = comp.split(":",1)[1] if ":" in comp else comp
              tr = it.get("textRange") or {}
              sl = tr.get("startLine", 1)
              sc = (tr.get("startOffset",0) or 0) + 1
              el = tr.get("endLine", sl)
              ec = max(tr.get("endOffset", sc), sc)
              runs[0]["results"].append({
                  "ruleId": rid,
                  "level": level(it.get("severity","MAJOR")),
                  "message": {"text": it.get("message","")},
                  "locations": [{
                      "physicalLocation": {
                          "artifactLocation": {"uri": path, "uriBaseId": "PROJECT_ROOT"},
                          "region": {"startLine": sl, "startColumn": sc, "endLine": el, "endColumn": ec}
                      }
                  }],
                  "fingerprints": {"sonarIssueKey": it.get("key","")}
              })

          pathlib.Path("reports").mkdir(parents=True, exist_ok=True)
          sarif = {"version":"2.1.0", "$schema":"https://json.schemastore.org/sarif-2.1.0.json", "runs": runs}
          with open("reports/sonarcloud.sarif","w",encoding="utf-8") as f:
              json.dump(sarif, f, ensure_ascii=False)
          print(f"Wrote {len(issues)} issues to reports/sonarcloud.sarif")
          PY

      # Keep an auditable copy of the SARIF. Do not upload secrets.
      - name: Upload SARIF as artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: sonarcloud-sarif
          path: reports/sonarcloud.sarif
          retention-days: 7
          if-no-files-found: error

  upload-to-code-scanning:
    name: Publish SARIF to Code Scanning
    needs: build-and-analyze
    runs-on: ubuntu-24.04
    timeout-minutes: 5
    permissions:
      contents: read
      security-events: write            # narrow write scope to this job only
      actions: read
    steps:
      - name: Harden runner (audit egress)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Download SARIF artifact
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: sonarcloud-sarif
          path: reports

      - name: Upload SARIF to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@3c3833e0f8c1c83d449a7478aa59c036a9165498 # v3.29.11
        with:
          sarif_file: reports/sonarcloud.sarif
          category: sonarcloud
